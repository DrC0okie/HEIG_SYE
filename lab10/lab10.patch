From 6272e2b3f5ede12d07f6db9f0644fce4c78c8e82 Mon Sep 17 00:00:00 2001
From: DrCookie <timothee.vanhove@heig-vd.ch>
Date: Fri, 8 Dec 2023 13:08:44 +0100
Subject: [PATCH] End of lab10

---
 rapport.md           | 56 ++++++++++++++++++++++++++++++++++++++++++++
 so3/arch/arm32/mmu.c |  2 +-
 usr/src/memory.c     | 21 +++++++++++++++--
 3 files changed, 76 insertions(+), 3 deletions(-)

diff --git a/rapport.md b/rapport.md
index e69de29..30a3bc9 100644
--- a/rapport.md
+++ b/rapport.md
@@ -0,0 +1,56 @@
+# SYE Labo 10
+
+**Auteur : ** TImothée Van Hove
+
+**Date : ** 08.12.2023
+
+### A)
+
+La gestion du tas se situe dans le fichier suivant : `so3/mm/heap.c`
+
+### B)
+
+L'algorithme de gestion de la mémoire utilisé est le Quick-Fit. Cette déduction est basée sur l'utilisation d'une structure de liste (`quick_list`) pour gérer les blocs de mémoire, l'initialisation spécifique de cette liste dans la fonction `heap_init`, et l'accent mis sur l'efficacité de l'espace et la rapidité d'allocation.
+
+    /*
+    * Initialization of the quick-fit list.
+    */
+    void heap_init(void)
+
+### C)
+
+La gestion de la MMU se fait dans les fichiers ci-dessous selon l'architecture de notre processeur.
+    so3/arch/arm32/mmu.c ou/et so3/arch/arm64/mmu.c
+
+Il s'agit d'une implémentation des fonctionnalités de gestion de la mémoire au niveau du système, gérant  des tables de pages, la traduction des adresses et la configuration des mappages de mémoire pour les différentes parties d'un système.
+
+### D)
+
+    uint32_t do_translate(uint32_t vaddr) {
+    	return virt_to_phys_pt(vaddr);
+    }
+
+### F)
+
+Exemple de sortie:
+
+    so3% memory
+    Virtual address: 0x20d018
+    Physical address: 0x48bc0018 
+    so3% memory
+    Virtual address: 0x20d018
+    Physical address: 0x4cfda018 
+    so3% memory
+    Virtual address: 0x20d018
+    Physical address: 0x513f4018 
+
+
+
+Le fait que l'adresse virtuelle reste constante lors de plusieurs invocations de la commande memory résulte de la manière dont le système d'exploitation gère son espace de mémoire virtuelle. Chaque programme se voit attribuer une section distincte de la mémoire virtuelle par l'unité de gestion de la mémoire (MMU). Cette allocation suit généralement un schéma prévisible, où le tas commence à un décalage fixe du début du segment de données du programme (.text, .data et .bss). Ces segments, dérivés du  fichier objet, ont des adresses virtuelles fixes. Par conséquent, l'adresse de base du tas, et donc les adresses virtuelles qu'il contient, tendent à être cohérentes entre les différentes exécutions d'un même programme.
+
+La cohérence des trois derniers chiffres hexadécimaux entre différentes adresses physiques est liée à la taille de la page et au décalage à l'intérieur d'une page. La taille de la page étant de 0x1000 (4096 octets), toute adresse à l'intérieur d'une page aura les mêmes 12 bits inférieurs (dans ce cas, '018'), représentant le décalage par rapport au début de la page. C'est pourquoi, même si le cadre physique de la page change, le décalage à l'intérieur de la page reste constant.
+
+
+Les premiers bits de l'adresse physique changent à chaque exécution et correspondent à l'index de la page qui devra être traduite par la MMU. Les nouvelles instances d'un programme se voient souvent attribuer de nouveaux blocs de mémoire, qui peuvent ne pas occuper les mêmes emplacements de mémoire physique que les instances précédentes. Cela fait partie de la stratégie de gestion de la mémoire du système d'exploitation, qui vise à utiliser efficacement la mémoire physique et à garantir que la mémoire disponible est utilisée de manière optimale.
+
+Le système d'exploitation garantit que chaque programme fonctionne dans son propre espace d'adressage virtuel isolé, offrant ainsi une protection et une sécurité. Cet isolement empêche les programmes d'accéder à la mémoire d'autres programmes ou de la modifier par inadvertance ou par malveillance, ce qui renforce la stabilité et la sécurité globales du système.
diff --git a/so3/arch/arm32/mmu.c b/so3/arch/arm32/mmu.c
index a6205ae..930bc1a 100644
--- a/so3/arch/arm32/mmu.c
+++ b/so3/arch/arm32/mmu.c
@@ -640,6 +640,6 @@ addr_t virt_to_phys_pt(addr_t vaddr) {
 
 // LEI: 2021_lab05
 uint32_t do_translate(uint32_t vaddr) {
-	return 0; //TO COMPLETE
+	return virt_to_phys_pt(vaddr);
 }
 
diff --git a/usr/src/memory.c b/usr/src/memory.c
index 1caa3b6..92eb092 100644
--- a/usr/src/memory.c
+++ b/usr/src/memory.c
@@ -7,7 +7,24 @@
 int main(int argc, char **argv) {
     uint8_t *buffer;
 
-    // TO COMPLETE
+    // Dynamically allocate 4 KiB of memory
+    buffer = (uint8_t *) calloc(4096, sizeof(uint8_t));
 
+    // Check if memory allocation was successful
+    if (buffer == NULL) {
+        fprintf(stderr, "Error in memory allocation!\n");
+        return EXIT_FAILURE;
+    }
+
+    // Display the virtual address of the memory block
+    printf("Virtual address: %p\n", (void *)buffer);
+
+    uint32_t physical_address = sys_translate((uint32_t) buffer);
+
+    // Display the physical address
+    printf("Physical address: %p \n", (void *)physical_address);
+
+    // Free allocated memory once done
+    free(buffer);
     return EXIT_SUCCESS;
-}
+ }
\ No newline at end of file
-- 
GitLab

